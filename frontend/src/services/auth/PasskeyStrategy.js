import { AuthStrategy } from './AuthStrategy.js'
import * as StellarSdk from 'stellar-sdk'

/**
 * Estrat√©gia de autentica√ß√£o via Passkey/WebAuthn com email
 */
export class PasskeyStrategy extends AuthStrategy {
  constructor() {
    super('passkey', 'Email + Passkey', 'üîê')
    this.apiUrl = import.meta.env.VITE_API_URL || 'http://localhost:3002'
  }

  /**
   * Verifica se WebAuthn est√° dispon√≠vel
   * @returns {Promise<boolean>}
   */
  async isAvailable() {
    try {
      console.log('[PASSKEY] Verificando disponibilidade do WebAuthn...')
      
      // Verificar se o navegador suporta WebAuthn
      const isWebAuthnSupported = !!(navigator.credentials && navigator.credentials.create)
      
      if (!isWebAuthnSupported) {
        console.log('[PASSKEY] WebAuthn n√£o suportado pelo navegador')
        return false
      }

      // Verificar se o dispositivo suporta autenticadores
      const isAuthenticatorSupported = window.PublicKeyCredential ? 
        await PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable() : false
      
      console.log('[PASSKEY] WebAuthn dispon√≠vel:', isWebAuthnSupported)
      console.log('[PASSKEY] Autenticador de plataforma dispon√≠vel:', isAuthenticatorSupported)
      
      return isWebAuthnSupported
    } catch (error) {
      console.log('[PASSKEY] Erro ao verificar disponibilidade:', error.message)
      return false
    }
  }

  /**
   * Realiza autentica√ß√£o via email + passkey
   * @param {string} email - Email do usu√°rio
   * @returns {Promise<{publicKey: string, address: string, metadata: object}>}
   */
  async authenticate(email) {
    try {
      console.log('[PASSKEY] Iniciando autentica√ß√£o para:', email)
      
      if (!email) {
        throw new Error('Email √© obrigat√≥rio para autentica√ß√£o via Passkey')
      }

      // Verificar se j√° existe uma conta para este email
      const existingUser = await this.checkExistingUser(email)
      
      if (existingUser) {
        return await this.authenticateExistingUser(email)
      } else {
        return await this.registerNewUser(email)
      }
    } catch (error) {
      console.error('[PASSKEY] Erro na autentica√ß√£o:', error)
      throw new Error(`Erro na autentica√ß√£o Passkey: ${error.message}`)
    }
  }

  /**
   * Verifica se j√° existe um usu√°rio com o email
   * @param {string} email 
   * @returns {Promise<boolean>}
   */
  async checkExistingUser(email) {
    try {
      const response = await fetch(`${this.apiUrl}/api/auth/passkey/check`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ email })
      })

      const data = await response.json()
      return data.exists || false
    } catch (error) {
      console.error('[PASSKEY] Erro ao verificar usu√°rio existente:', error)
      return false
    }
  }

  /**
   * Registra um novo usu√°rio com Passkey
   * @param {string} email 
   * @returns {Promise<object>}
   */
  async registerNewUser(email) {
    try {
      console.log('[PASSKEY] Registrando novo usu√°rio...')
      
      // Gerar par de chaves Stellar para o usu√°rio
      const keypair = StellarSdk.Keypair.random()
      const publicKey = keypair.publicKey()
      const secretKey = keypair.secret()

      // Solicitar op√ß√µes de registro do servidor
      const optionsResponse = await fetch(`${this.apiUrl}/api/auth/passkey/register/begin`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ 
          email,
          publicKey,
          displayName: email.split('@')[0]
        })
      })

      if (!optionsResponse.ok) {
        throw new Error('Erro ao obter op√ß√µes de registro')
      }

      const options = await optionsResponse.json()

      // Criar credencial WebAuthn
      console.log('[PASSKEY] Criando credencial WebAuthn...')
      const credential = await navigator.credentials.create({
        publicKey: {
          ...options.publicKey,
          challenge: new Uint8Array(options.publicKey.challenge),
          user: {
            ...options.publicKey.user,
            id: new Uint8Array(options.publicKey.user.id)
          }
        }
      })

      if (!credential) {
        throw new Error('Falha ao criar credencial')
      }

      // Finalizar registro no servidor
      const finishResponse = await fetch(`${this.apiUrl}/api/auth/passkey/register/finish`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          email,
          publicKey,
          credential: {
            id: credential.id,
            rawId: Array.from(new Uint8Array(credential.rawId)),
            response: {
              attestationObject: Array.from(new Uint8Array(credential.response.attestationObject)),
              clientDataJSON: Array.from(new Uint8Array(credential.response.clientDataJSON))
            },
            type: credential.type
          }
        })
      })

      if (!finishResponse.ok) {
        throw new Error('Erro ao finalizar registro')
      }

      const result = await finishResponse.json()
      
      console.log('[PASSKEY] Usu√°rio registrado com sucesso')
      
      // Armazenar chave secreta de forma segura (temporariamente no sessionStorage)
      // Em produ√ß√£o, considere usar um m√©todo mais seguro
      sessionStorage.setItem(`stellar_secret_${email}`, secretKey)
      
      return {
        publicKey,
        address: publicKey,
        metadata: {
          provider: 'passkey',
          email,
          timestamp: Date.now(),
          credentialId: credential.id,
          isNewUser: true
        }
      }
    } catch (error) {
      console.error('[PASSKEY] Erro no registro:', error)
      throw new Error(`Erro no registro: ${error.message}`)
    }
  }

  /**
   * Autentica usu√°rio existente
   * @param {string} email 
   * @returns {Promise<object>}
   */
  async authenticateExistingUser(email) {
    try {
      console.log('[PASSKEY] Autenticando usu√°rio existente...')
      
      // Solicitar op√ß√µes de autentica√ß√£o do servidor
      const optionsResponse = await fetch(`${this.apiUrl}/api/auth/passkey/login/begin`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ email })
      })

      if (!optionsResponse.ok) {
        throw new Error('Erro ao obter op√ß√µes de autentica√ß√£o')
      }

      const options = await optionsResponse.json()

      // Autenticar com WebAuthn
      console.log('[PASSKEY] Solicitando autentica√ß√£o WebAuthn...')
      const assertion = await navigator.credentials.get({
        publicKey: {
          ...options.publicKey,
          challenge: new Uint8Array(options.publicKey.challenge),
          allowCredentials: options.publicKey.allowCredentials?.map(cred => ({
            ...cred,
            id: new Uint8Array(cred.id)
          }))
        }
      })

      if (!assertion) {
        throw new Error('Falha na autentica√ß√£o')
      }

      // Finalizar autentica√ß√£o no servidor
      const finishResponse = await fetch(`${this.apiUrl}/api/auth/passkey/login/finish`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          email,
          assertion: {
            id: assertion.id,
            rawId: Array.from(new Uint8Array(assertion.rawId)),
            response: {
              authenticatorData: Array.from(new Uint8Array(assertion.response.authenticatorData)),
              clientDataJSON: Array.from(new Uint8Array(assertion.response.clientDataJSON)),
              signature: Array.from(new Uint8Array(assertion.response.signature)),
              userHandle: assertion.response.userHandle ? Array.from(new Uint8Array(assertion.response.userHandle)) : null
            },
            type: assertion.type
          }
        })
      })

      if (!finishResponse.ok) {
        throw new Error('Erro ao finalizar autentica√ß√£o')
      }

      const result = await finishResponse.json()
      
      console.log('[PASSKEY] Autentica√ß√£o bem-sucedida')
      
      return {
        publicKey: result.publicKey,
        address: result.publicKey,
        metadata: {
          provider: 'passkey',
          email,
          timestamp: Date.now(),
          credentialId: assertion.id,
          isNewUser: false
        }
      }
    } catch (error) {
      console.error('[PASSKEY] Erro na autentica√ß√£o:', error)
      throw new Error(`Erro na autentica√ß√£o: ${error.message}`)
    }
  }

  /**
   * Desconecta do Passkey
   * @returns {Promise<void>}
   */
  async disconnect() {
    console.log('[PASSKEY] Desconectando...')
    // Limpar dados sens√≠veis do sessionStorage
    const keys = Object.keys(sessionStorage)
    keys.forEach(key => {
      if (key.startsWith('stellar_secret_')) {
        sessionStorage.removeItem(key)
      }
    })
    return Promise.resolve()
  }

  /**
   * Verifica sess√£o ativa
   * @returns {Promise<object|null>}
   */
  async checkSession() {
    try {
      // Verificar se h√° dados de sess√£o no localStorage
      const savedAuth = localStorage.getItem('stellar_auth')
      if (!savedAuth) {
        return null
      }

      const authData = JSON.parse(savedAuth)
      if (authData.provider === 'passkey' && authData.email) {
        // Verificar se a sess√£o ainda √© v√°lida (24 horas)
        const isExpired = Date.now() - authData.timestamp > 24 * 60 * 60 * 1000
        if (!isExpired) {
          return {
            publicKey: authData.publicKey,
            address: authData.publicKey,
            provider: 'passkey',
            email: authData.email
          }
        }
      }
      return null
    } catch (error) {
      console.log('[PASSKEY] Erro ao verificar sess√£o:', error.message)
      return null
    }
  }
}