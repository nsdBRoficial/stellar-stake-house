import { AuthStrategy } from './AuthStrategy.js'
import { isConnected, getPublicKey, signTransaction } from '@stellar/freighter-api'

/**
 * Estrat√©gia de autentica√ß√£o para Freighter Wallet
 */
export class FreighterStrategy extends AuthStrategy {
  constructor() {
    super('freighter', 'Freighter Wallet', 'üöÄ')
  }

  /**
   * Verifica se o Freighter est√° dispon√≠vel
   * @returns {Promise<boolean>}
   */
  async isAvailable() {
    try {
      console.log('[FREIGHTER] Iniciando verifica√ß√£o de disponibilidade...')
      
      // Verifica√ß√£o 1: Verificar se a extens√£o est√° instalada
      if (typeof window === 'undefined') {
        console.log('[FREIGHTER] Ambiente n√£o √© browser')
        return false
      }
      
      // Verifica√ß√£o 2: Verificar m√∫ltiplas formas de detec√ß√£o
      const hasFreighterGlobal = !!(window.freighter)
      const hasStellarFreighter = !!(window.stellar && window.stellar.freighter)
      const hasFreighterAPI = typeof isConnected === 'function'
      
      console.log('[FREIGHTER] Verifica√ß√µes de detec√ß√£o:', {
        hasFreighterGlobal,
        hasStellarFreighter,
        hasFreighterAPI
      })
      
      if (!hasFreighterAPI) {
        console.log('[FREIGHTER] API do Freighter n√£o est√° dispon√≠vel')
        return false
      }
      
      // Verifica√ß√£o 3: Tentar usar a API com timeout
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('Timeout na verifica√ß√£o')), 5000)
      })
      
      const connectionCheck = isConnected()
      
      await Promise.race([connectionCheck, timeoutPromise])
      
      console.log('[FREIGHTER] Dispon√≠vel e funcionando')
      return true
    } catch (error) {
      console.log('[FREIGHTER] N√£o dispon√≠vel ou com erro:', {
        message: error.message,
        name: error.name
      })
      return false
    }
  }

  /**
   * Realiza autentica√ß√£o com Freighter
   * @returns {Promise<{publicKey: string, address: string, metadata: object}>}
   */
  async authenticate() {
    const maxRetries = 3
    let lastError = null
    
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        console.log(`[FREIGHTER] Tentativa ${attempt}/${maxRetries} de autentica√ß√£o...`)
        
        // Verificar se est√° dispon√≠vel
        const available = await this.isAvailable()
        if (!available) {
          throw new Error('Freighter wallet n√£o est√° dispon√≠vel. Verifique se a extens√£o est√° instalada e ativa.')
        }

        // Aguardar um pouco entre tentativas (exceto na primeira)
        if (attempt > 1) {
          console.log(`[FREIGHTER] Aguardando ${attempt * 500}ms antes da tentativa...`)
          await new Promise(resolve => setTimeout(resolve, attempt * 500))
        }

        // Obter chave p√∫blica com timeout
        console.log('[FREIGHTER] Solicitando chave p√∫blica...')
        
        const timeoutPromise = new Promise((_, reject) => {
          setTimeout(() => reject(new Error('Timeout ao solicitar chave p√∫blica')), 10000)
        })
        
        const publicKeyPromise = getPublicKey()
        const publicKey = await Promise.race([publicKeyPromise, timeoutPromise])
        
        if (!publicKey) {
          throw new Error('Chave p√∫blica vazia retornada pelo Freighter')
        }
        
        // Validar formato da chave p√∫blica Stellar
        if (!/^G[A-Z2-7]{55}$/.test(publicKey)) {
          throw new Error('Formato de chave p√∫blica Stellar inv√°lido')
        }

        console.log(`[FREIGHTER] Autentica√ß√£o bem-sucedida na tentativa ${attempt}`)
        
        return {
          publicKey,
          address: publicKey,
          metadata: {
            provider: 'freighter',
            timestamp: Date.now(),
            version: 'latest',
            attempt: attempt
          }
        }
      } catch (error) {
        console.error(`[FREIGHTER] Erro na tentativa ${attempt}:`, {
          message: error.message,
          name: error.name,
          stack: error.stack
        })
        
        lastError = error
        
        // Se √© a √∫ltima tentativa ou erro cr√≠tico, n√£o tentar novamente
        if (attempt === maxRetries || 
            error.message.includes('User declined') ||
            error.message.includes('rejected') ||
            error.message.includes('denied')) {
          break
        }
        
        console.log(`[FREIGHTER] Tentando novamente em ${attempt * 1000}ms...`)
        await new Promise(resolve => setTimeout(resolve, attempt * 1000))
      }
    }
    
    // Se chegou aqui, todas as tentativas falharam
    console.error('[FREIGHTER] Todas as tentativas de autentica√ß√£o falharam')
    
    if (lastError.message.includes('User declined') || lastError.message.includes('rejected')) {
      throw new Error('Autentica√ß√£o cancelada pelo usu√°rio')
    } else if (lastError.message.includes('locked')) {
      throw new Error('Freighter est√° bloqueado. Desbloqueie a carteira e tente novamente.')
    } else if (lastError.message.includes('Timeout')) {
      throw new Error('Tempo limite excedido. Verifique se o Freighter est√° funcionando e tente novamente.')
    } else {
      throw new Error(`Erro no Freighter ap√≥s ${maxRetries} tentativas: ${lastError.message}`)
    }
  }

  /**
   * Desconecta do Freighter
   * @returns {Promise<void>}
   */
  async disconnect() {
    console.log('[FREIGHTER] Desconectando...')
    // Freighter n√£o tem m√©todo de desconex√£o expl√≠cito
    // A desconex√£o √© gerenciada pelo contexto da aplica√ß√£o
    return Promise.resolve()
  }

  /**
   * Verifica sess√£o ativa no Freighter
   * @returns {Promise<object|null>}
   */
  async checkSession() {
    try {
      const available = await this.isAvailable()
      if (!available) {
        return null
      }

      const publicKey = await getPublicKey()
      if (publicKey) {
        return {
          publicKey,
          address: publicKey,
          provider: 'freighter'
        }
      }
      return null
    } catch (error) {
      console.log('[FREIGHTER] Erro ao verificar sess√£o:', error.message)
      return null
    }
  }

  /**
   * Assina uma transa√ß√£o com Freighter
   * @param {string} transaction - Transa√ß√£o XDR
   * @param {object} options - Op√ß√µes de assinatura
   * @returns {Promise<string>}
   */
  async signTransaction(transaction, options = {}) {
    try {
      console.log('[FREIGHTER] Assinando transa√ß√£o...')
      const signedXdr = await signTransaction(transaction, options)
      console.log('[FREIGHTER] Transa√ß√£o assinada com sucesso')
      return signedXdr
    } catch (error) {
      console.error('[FREIGHTER] Erro ao assinar transa√ß√£o:', error)
      throw new Error(`Erro ao assinar transa√ß√£o: ${error.message}`)
    }
  }
}