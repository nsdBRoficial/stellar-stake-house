// Configura√ß√£o dos contratos Stellar para integra√ß√£o com o frontend

// Configura√ß√µes da rede Stellar
export const STELLAR_CONFIG = {
  testnet: {
    networkPassphrase: 'Test SDF Network ; September 2015',
    rpcUrl: 'https://soroban-testnet.stellar.org:443',
    horizonUrl: 'https://horizon-testnet.stellar.org',
    friendbotUrl: 'https://friendbot.stellar.org'
  },
  mainnet: {
    networkPassphrase: 'Public Global Stellar Network ; September 2015',
    rpcUrl: 'https://soroban-rpc.stellar.org:443',
    horizonUrl: 'https://horizon.stellar.org'
  }
}

// IDs dos contratos (ser√£o preenchidos ap√≥s deploy)
export const CONTRACT_IDS = {
  testnet: {
    poolRewards: process.env.REACT_APP_POOL_REWARDS_CONTRACT_ID || 'CCSDDTQSALKJQ2SXXBS2VUSYD74QDHG22KFZRHMHTOCWDCMKO7JVHSXY',
    // Adicionar outros contratos conforme necess√°rio
  },
  mainnet: {
    poolRewards: process.env.REACT_APP_POOL_REWARDS_CONTRACT_ID_MAINNET || '',
  }
}

// Tokens suportados na testnet
export const SUPPORTED_TOKENS = {
  testnet: {
    KALE: {
      symbol: 'KALE',
      name: 'Kale Token',
      contractAddress: 'CDLZFC3SYJYDZT7K67VZ75HPJVIEUVNIXF47ZG2FB2RMQQAHHAGCN4YU', // Placeholder
      decimals: 7,
      icon: 'ü•¨'
    },
    XLM: {
      symbol: 'XLM',
      name: 'Stellar Lumens',
      contractAddress: 'native',
      decimals: 7,
      icon: '‚≠ê'
    }
  },
  mainnet: {
    // Configurar tokens da mainnet quando necess√°rio
  }
}

// Configura√ß√µes padr√£o para pools
export const POOL_DEFAULTS = {
  minTotalRewards: 1000, // M√≠nimo de tokens para criar uma pool
  maxTotalRewards: 1000000000, // M√°ximo de tokens para uma pool
  minAPY: 0.1, // APY m√≠nimo em %
  maxAPY: 100, // APY m√°ximo em %
  minDistributionDays: 1, // M√≠nimo de dias para distribui√ß√£o
  maxDistributionDays: 365, // M√°ximo de dias para distribui√ß√£o
  minDelegationAmount: 1 // Valor m√≠nimo para delega√ß√£o
}

// Fun√ß√µes utilit√°rias para intera√ß√£o com contratos
export const CONTRACT_FUNCTIONS = {
  // Pool Rewards Contract
  poolRewards: {
    // Fun√ß√µes de leitura (n√£o requerem assinatura)
    read: {
      getPool: 'get_pool',
      getActivePools: 'get_active_pools',
      getUserDelegation: 'get_user_delegation',
      calculatePendingRewards: 'calculate_pending_rewards'
    },
    // Fun√ß√µes de escrita (requerem assinatura)
    write: {
      createPool: 'create_pool',
      delegateToPool: 'delegate_to_pool',
      claimRewards: 'claim_rewards',
      togglePoolStatus: 'toggle_pool_status'
    }
  }
}

// Configura√ß√µes de gas e fees
export const TRANSACTION_CONFIG = {
  baseFee: '100', // Fee base em stroops
  timeout: 30, // Timeout em segundos
  networkPassphrase: STELLAR_CONFIG.testnet.networkPassphrase // Usar testnet por padr√£o
}

// Mensagens de erro comuns
export const ERROR_MESSAGES = {
  WALLET_NOT_CONNECTED: 'Carteira n√£o conectada',
  INSUFFICIENT_BALANCE: 'Saldo insuficiente',
  POOL_NOT_FOUND: 'Pool n√£o encontrada',
  POOL_INACTIVE: 'Pool n√£o est√° ativa',
  POOL_ENDED: 'Pool j√° terminou',
  INVALID_AMOUNT: 'Valor inv√°lido',
  TRANSACTION_FAILED: 'Transa√ß√£o falhou',
  CONTRACT_ERROR: 'Erro no contrato inteligente',
  NETWORK_ERROR: 'Erro de rede'
}

// Eventos do contrato (para logs e monitoramento)
export const CONTRACT_EVENTS = {
  POOL_CREATED: 'pool_created',
  DELEGATION_MADE: 'delegation_made',
  REWARDS_CLAIMED: 'rewards_claimed',
  POOL_STATUS_CHANGED: 'pool_status_changed'
}

// Configura√ß√µes de cache para otimiza√ß√£o
export const CACHE_CONFIG = {
  poolDataTTL: 300000, // 5 minutos em ms
  userDataTTL: 60000, // 1 minuto em ms
  rewardsDataTTL: 30000 // 30 segundos em ms
}

// Fun√ß√£o para obter configura√ß√£o baseada no ambiente
export function getNetworkConfig(network = 'testnet') {
  return {
    stellar: STELLAR_CONFIG[network],
    contracts: CONTRACT_IDS[network],
    tokens: SUPPORTED_TOKENS[network]
  }
}

// Fun√ß√£o para validar par√¢metros de pool
export function validatePoolParams(params) {
  const errors = []
  
  if (!params.poolName || params.poolName.trim().length < 3) {
    errors.push('Nome da pool deve ter pelo menos 3 caracteres')
  }
  
  if (!params.totalRewards || params.totalRewards < POOL_DEFAULTS.minTotalRewards) {
    errors.push(`Total de recompensas deve ser pelo menos ${POOL_DEFAULTS.minTotalRewards}`)
  }
  
  if (params.totalRewards > POOL_DEFAULTS.maxTotalRewards) {
    errors.push(`Total de recompensas n√£o pode exceder ${POOL_DEFAULTS.maxTotalRewards}`)
  }
  
  if (!params.maxAPY || params.maxAPY < POOL_DEFAULTS.minAPY || params.maxAPY > POOL_DEFAULTS.maxAPY) {
    errors.push(`APY deve estar entre ${POOL_DEFAULTS.minAPY}% e ${POOL_DEFAULTS.maxAPY}%`)
  }
  
  if (!params.distributionDays || params.distributionDays < POOL_DEFAULTS.minDistributionDays || params.distributionDays > POOL_DEFAULTS.maxDistributionDays) {
    errors.push(`Per√≠odo de distribui√ß√£o deve estar entre ${POOL_DEFAULTS.minDistributionDays} e ${POOL_DEFAULTS.maxDistributionDays} dias`)
  }
  
  return errors
}

// Fun√ß√£o para formatar valores para o contrato
export function formatValueForContract(value, decimals = 7) {
  return Math.floor(value * Math.pow(10, decimals))
}

// Fun√ß√£o para formatar valores do contrato para exibi√ß√£o
export function formatValueFromContract(value, decimals = 7) {
  return value / Math.pow(10, decimals)
}

// Fun√ß√£o para calcular APY em pontos base
export function apyToBasicPoints(apy) {
  return Math.floor(apy * 100) // 15% = 1500 pontos base
}

// Fun√ß√£o para converter pontos base para APY
export function basicPointsToApy(basicPoints) {
  return basicPoints / 100
}

export default {
  STELLAR_CONFIG,
  CONTRACT_IDS,
  SUPPORTED_TOKENS,
  POOL_DEFAULTS,
  CONTRACT_FUNCTIONS,
  TRANSACTION_CONFIG,
  ERROR_MESSAGES,
  CONTRACT_EVENTS,
  CACHE_CONFIG,
  getNetworkConfig,
  validatePoolParams,
  formatValueForContract,
  formatValueFromContract,
  apyToBasicPoints,
  basicPointsToApy
}